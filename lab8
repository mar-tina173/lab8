#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
#include <ctime>

using namespace std;

// Clase base Dispositivo
class Dispositivo {
protected:
    string nombre;

public:
    Dispositivo(const string& nombre) : nombre(nombre) {}
    virtual ~Dispositivo() { cout << "Destructor de Dispositivo llamado: " << nombre << endl; }

    virtual void mostrarInformacion() const {
        cout << "Dispositivo: " << nombre << endl;
    }
};

// Clase derivada Sensor
class Sensor : public Dispositivo {
private:
    int rangoMin;
    int rangoMax;

public:
    Sensor(const string& nombre, int rangoMin, int rangoMax)
        : Dispositivo(nombre), rangoMin(rangoMin), rangoMax(rangoMax) {}

    ~Sensor() override { cout << "Destructor de Sensor llamado: " << nombre << endl; }

    int leerDato() const {
        return rangoMin + (rand() % (rangoMax - rangoMin + 1));
    }

    void mostrarInformacion() const override {
        cout << "Sensor: " << nombre << ", Rango: [" << rangoMin << ", " << rangoMax << "]" << endl;
    }
};

// Clase derivada Controlador
class Controlador : public Dispositivo {
private:
    vector<Sensor*> sensores;

public:
    Controlador(const string& nombre) : Dispositivo(nombre) {}

    ~Controlador() override {
        cout << "Destructor de Controlador llamado: " << nombre << endl;
        for (Sensor* sensor : sensores) {
            delete sensor;
        }
    }

    void agregarSensor(Sensor* sensor) {
        sensores.push_back(sensor);
    }

    void mostrarInformacion() const override {
        cout << "Controlador: " << nombre << endl;
        cout << "Sensores asociados:" << endl;
        for (const Sensor* sensor : sensores) {
            sensor->mostrarInformacion();
        }
    }

    void leerSensores() const {
        cout << "Lecturas de sensores para " << nombre << ":" << endl;
        for (const Sensor* sensor : sensores) {
            cout << "  " << sensor->leerDato() << endl;
        }
    }
};

// Menú interactivo
void menu() {
    vector<Controlador*> controladores;
    srand(static_cast<unsigned>(time(0))); // Inicializar semilla aleatoria

    int opcion;
    do {
        cout << "\nSistema de Gestión de Sensores y Controladores" << endl;
        cout << "1. Crear Controlador" << endl;
        cout << "2. Crear Sensor y asociarlo a un Controlador" << endl;
        cout << "3. Mostrar estado del sistema" << endl;
        cout << "4. Leer datos de los sensores" << endl;
        cout << "5. Salir" << endl;
        cout << "Seleccione una opción: ";
        cin >> opcion;

        switch (opcion) {
        case 1: {
            string nombreControlador;
            cout << "Ingrese el nombre del controlador: ";
            cin >> nombreControlador;
            controladores.push_back(new Controlador(nombreControlador));
            break;
        }
        case 2: {
            if (controladores.empty()) {
                cout << "No hay controladores disponibles. Cree uno primero." << endl;
                break;
            }

            string nombreSensor;
            int rangoMin, rangoMax, indexControlador;

            cout << "Ingrese el nombre del sensor: ";
            cin >> nombreSensor;
            cout << "Ingrese el rango mínimo: ";
            cin >> rangoMin;
            cout << "Ingrese el rango máximo: ";
            cin >> rangoMax;

            cout << "Seleccione un controlador para asociar el sensor:" << endl;
            for (size_t i = 0; i < controladores.size(); ++i) {
                cout << i + 1 << ". ";
                controladores[i]->mostrarInformacion();
            }

            cin >> indexControlador;
            if (indexControlador < 1 || indexControlador > controladores.size()) {
                cout << "Índice inválido." << endl;
                break;
            }

            Sensor* nuevoSensor = new Sensor(nombreSensor, rangoMin, rangoMax);
            controladores[indexControlador - 1]->agregarSensor(nuevoSensor);
            break;
        }
        case 3:
            for (const Controlador* controlador : controladores) {
                controlador->mostrarInformacion();
            }
            break;
        case 4:
            for (const Controlador* controlador : controladores) {
                controlador->leerSensores();
            }
            break;
        case 5:
            cout << "Saliendo del programa..." << endl;
            break;
        default:
            cout << "Opción inválida." << endl;
        }
    } while (opcion != 5);

    // Liberar memoria
    for (Controlador* controlador : controladores) {
        delete controlador;
    }
}

int main() {
    menu();
    return 0;
}
