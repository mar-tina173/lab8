// Dispositivo.h
#ifndef DISPOSITIVO_H
#define DISPOSITIVO_H

#include <string>

using namespace std;

class Dispositivo {
protected:
    string nombre;
    int id;

public:
    Dispositivo(const string& nombre, int id) : nombre(nombre), id(id) {}
    virtual ~Dispositivo() {} // Destructor virtual

    virtual void mostrarInfo() const = 0; // Método abstracto para mostrar información

    string getNombre() const { return nombre; }
    int getId() const { return id; }
};

#endif // DISPOSITIVO_H

// Sensor.h
#ifndef SENSOR_H
#define SENSOR_H

#include "Dispositivo.h"
#include <random>
#include <iostream>

using namespace std;

class Sensor : public Dispositivo {
private:
    float ultimaLectura;

public:
    Sensor(const string& nombre, int id) : Dispositivo(nombre, id), ultimaLectura(0.0f) {}

    void leerDato() {
        random_device rd;
        mt19937 gen(rd());
        uniform_real_distribution<> dis(0.0, 100.0);
        ultimaLectura = dis(gen); // Simula una lectura entre 0.0 y 100.0
    }

    float getUltimaLectura() const { return ultimaLectura; }

    void mostrarInfo() const override {
        cout << "Sensor [ID: " << id << ", Nombre: " << nombre << ", Última Lectura: " << ultimaLectura << "]\n";
    }
};

#endif // SENSOR_H

// Controlador.h
#ifndef CONTROLADOR_H
#define CONTROLADOR_H

#include "Dispositivo.h"
#include "Sensor.h"
#include <vector>
#include <iostream>

using namespace std;

class Controlador : public Dispositivo {
private:
    vector<Sensor*> sensoresAsociados;

public:
    Controlador(const string& nombre, int id) : Dispositivo(nombre, id) {}

    ~Controlador() {
        for (Sensor* sensor : sensoresAsociados) {
            delete sensor; // Libera memoria de los sensores asociados
        }
    }

    void registrarSensor(Sensor* sensor) {
        sensoresAsociados.push_back(sensor);
    }

    void eliminarSensor(int idSensor) {
        for (auto it = sensoresAsociados.begin(); it != sensoresAsociados.end(); ++it) {
            if ((*it)->getId() == idSensor) {
                delete* it;
                sensoresAsociados.erase(it);
                return;
            }
        }
    }

    void mostrarInfo() const override {
        cout << "Controlador [ID: " << id << ", Nombre: " << nombre << "]\n";
        for (const Sensor* sensor : sensoresAsociados) {
            sensor->mostrarInfo();
        }
    }
};

#endif // CONTROLADOR_H

// main.cpp
#include "Sensor.h"
#include "Controlador.h"
#include <iostream>
#include <memory>
#include <vector>

using namespace std;

void mostrarMenu() {
    cout << "\n--- Sistema de Gestión de Sensores y Controladores ---\n";
    cout << "1. Registrar un nuevo sensor\n";
    cout << "2. Registrar un nuevo controlador\n";
    cout << "3. Asociar un sensor a un controlador\n";
    cout << "4. Mostrar estado del sistema\n";
    cout << "5. Eliminar un sensor\n";
    cout << "6. Salir\n";
    cout << "Seleccione una opción: ";
}

int main() {
    vector<Controlador*> controladores;
    vector<Sensor*> sensores;
    int opcion;

    do {
        mostrarMenu();
        cin >> opcion;

        switch (opcion) {
        case 1: {
            string nombre;
            int id;
            cout << "Ingrese el nombre del sensor: ";
            cin >> nombre;
            cout << "Ingrese el ID del sensor: ";
            cin >> id;
            sensores.push_back(new Sensor(nombre, id));
            cout << "Sensor registrado exitosamente.\n";
            break;
        }
        case 2: {
            string nombre;
            int id;
            cout << "Ingrese el nombre del controlador: ";
            cin >> nombre;
            cout << "Ingrese el ID del controlador: ";
            cin >> id;
            controladores.push_back(new Controlador(nombre, id));
            cout << "Controlador registrado exitosamente.\n";
            break;
        }
        case 3: {
            int idControlador, idSensor;
            cout << "Ingrese el ID del controlador: ";
            cin >> idControlador;
            cout << "Ingrese el ID del sensor: ";
            cin >> idSensor;

            Controlador* controlador = nullptr;
            Sensor* sensor = nullptr;

            for (Controlador* c : controladores) {
                if (c->getId() == idControlador) {
                    controlador = c;
                    break;
                }
            }

            for (Sensor* s : sensores) {
                if (s->getId() == idSensor) {
                    sensor = s;
                    break;
                }
            }

            if (controlador && sensor) {
                controlador->registrarSensor(sensor);
                cout << "Sensor asociado exitosamente.\n";
            }
            else {
                cout << "Controlador o sensor no encontrado.\n";
            }
            break;
        }
        case 4: {
            cout << "\nEstado del sistema:\n";
            for (Controlador* c : controladores) {
                c->mostrarInfo();
            }
            break;
        }
        case 5: {
            int idSensor;
            cout << "Ingrese el ID del sensor a eliminar: ";
            cin >> idSensor;

            for (auto it = sensores.begin(); it != sensores.end(); ++it) {
                if ((*it)->getId() == idSensor) {
                    delete* it;
                    sensores.erase(it);
                    cout << "Sensor eliminado exitosamente.\n";
                    break;
                }
            }

            for (Controlador* c : controladores) {
                c->eliminarSensor(idSensor);
            }
            break;
        }
        case 6:
            cout << "Saliendo del sistema...\n";
            break;
        default:
            cout << "Opción inválida. Intente nuevamente.\n";
        }
    } while (opcion != 6);

    for (Sensor* s : sensores) {
        delete s;
    }

    for (Controlador* c : controladores) {
        delete c;
    }

    return 0;
}
